// USING SQUARED DIFFERENCES instead of absolute differences

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class Utility {
    private static final double ERROR_THRESHOLD = 85; // Adjust this as needed
    // private static final int MAX_DEPTH = 7;

    private static class Quadrant implements Serializable {
        int x, y, width, height;
        int[] color;

        Quadrant(int x, int y, int width, int height, int[] color) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.color = color;
        }

    }

    public void Compress(int[][][] pixels, String outputFileName) throws IOException {
        int width = pixels.length;
        int height = pixels[0].length;

        List<Quadrant> quadrants = new ArrayList<>();
        compressQuadtree(pixels, 0, 0, width, height, quadrants, 0);

        int updatedPixel[][][] = decompressQuadrant(quadrants, width, height);

        PixeltoImageConverter converter = new PixeltoImageConverter(updatedPixel);
        converter.saveImage(outputFileName, "png");

    }

    public int[][][] Decompress(String inputFileName) throws IOException, ClassNotFoundException {

        // Read the list of Quadrant objects
        // Now you have the width, height, and the list of Quadrant objects
        // Initialize the image data

        ImagetoPixelConverter ImagetoPixelConverter = new ImagetoPixelConverter(inputFileName);

        // Converting the image to pixels

        int[][][] pixelData = ImagetoPixelConverter.getPixelData();

        return pixelData;

    }

    private void compressQuadtree(int[][][] pixels, int x, int y, int width, int height, List<Quadrant> quadrants,
            int depth) {

        boolean error = calculateError(pixels, x, y, width, height);

        if (!error) { // Depth limit to prevent excessive recursion
            int color[] = getColor(pixels, x, y, width, height);
            quadrants.add(new Quadrant(x, y, width, height, color));
        } else {
            int newWidth = width / 2;
            int newHeight = height / 2;

            compressQuadtree(pixels, x, y, newWidth, newHeight, quadrants, depth + 1);
            compressQuadtree(pixels, x + newWidth, y, width - newWidth, newHeight, quadrants, depth + 1);
            compressQuadtree(pixels, x, y + newHeight, newWidth, height - newHeight, quadrants, depth + 1);
            compressQuadtree(pixels, x + newWidth, y + newHeight, width - newWidth, height - newHeight, quadrants,
                    depth + 1);

        }
    }

    private int[] getColor(int[][][] pixels, int x, int y, int width, int height) {
        int[] colorSum = {0, 0, 0};
        int count = 0;
    
        for (int i = x; i < x + width; i++) {
            for (int j = y; j < y + height; j++) {
                for (int k = 0; k < 3; k++) {
                    colorSum[k] += pixels[i][j][k];
                }
                count++;
            }
        }
    
        int[] averageColor = new int[3];
    
        if (count > 0) {
            for (int k = 0; k < 3; k++) {
                averageColor[k] = colorSum[k] / count;
            }
        }
    
        return averageColor;
    }

    private int[][][] decompressQuadrant(List<Quadrant> quadrants, int imageWidth, int imageHeight) {
        if (quadrants == null || imageWidth <= 0 || imageHeight <= 0) {
            throw new IllegalArgumentException("Invalid input parameters");
        }

        int[][][] result = new int[imageWidth][imageHeight][3];

        for (Quadrant q : quadrants) {
            for (int i = q.x; i < q.x + q.width && i < imageWidth; i++) {
                for (int j = q.y; j < q.y + q.height && j < imageHeight; j++) {
                    if (i >= 0 && j >= 0) {

                        result[i][j][0] = q.color[0];
                        result[i][j][1] = q.color[1];
                        result[i][j][2] = q.color[2];
                    }
                }
            }
        }

        return result;
    }

    public static boolean calculateError(int[][][] pixels, int x, int y, int width, int height) {
        int[] initialColor = pixels[x][y]; // Get the color of the first pixel
        int squaredThreshold = (int) (ERROR_THRESHOLD * ERROR_THRESHOLD);
    
        // Loop through the quadrant
        for (int i = x; i < x + width; i++) {
            for (int j = y; j < y + height; j++) {
                int[] currentColor = pixels[i][j];
                int redDiff = initialColor[0] - currentColor[0];
                int greenDiff = initialColor[1] - currentColor[1];
                int blueDiff = initialColor[2] - currentColor[2];
    
                int totalSquaredDiff = redDiff * redDiff + greenDiff * greenDiff + blueDiff * blueDiff;
    
                if (totalSquaredDiff > squaredThreshold) {
                    return true; // Color deviation squared exceeds the threshold
                }
            }
        }
    
        return false; // Quadrant has uniform color within the error threshold
    }
}
